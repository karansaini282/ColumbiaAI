**linear

import csv
import decimal
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import sklearn.neighbors
from sklearn import tree
with open('input3.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    file1=list(spamreader)
arr_data=[]
arr_target=[]
for i in range(1,len(file1)):
    row=file1[i]
    items_string=row[0]
    items=items_string.split(',')
    arr_data.append([float(items[0]),float(items[1])])
    arr_target.append(float(items[2]))
parameter_candidates = [
  { 'C' : [0.1, 0.5, 1, 5, 10, 50, 100],'kernel':['linear']}
]
X_train, X_test, Y_train, Y_test = train_test_split(arr_data,arr_target,test_size=0.4,random_state=0)
clf = GridSearchCV(estimator=svm.SVC(),param_grid=parameter_candidates,cv=5,scoring='accuracy')
clf.fit(X_train,Y_train)
print(clf.best_score_)
print(clf.score(X_test,Y_test))

**poly

import csv
import decimal
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import sklearn.neighbors
from sklearn import tree
with open('input3.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    file1=list(spamreader)
arr_data=[]
arr_target=[]
for i in range(1,len(file1)):
    row=file1[i]
    items_string=row[0]
    items=items_string.split(',')
    arr_data.append([float(items[0]),float(items[1])])
    arr_target.append(float(items[2]))
parameter_candidates = [
  { 'C' : [0.1, 1, 3],'kernel':['poly'],'gamma':[0.1, 1],'degree':[4, 5, 6]}
]
X_train, X_test, Y_train, Y_test = train_test_split(arr_data,arr_target,test_size=0.4,random_state=0)
clf = GridSearchCV(estimator=svm.SVC(),param_grid=parameter_candidates,cv=5,scoring='accuracy')
clf.fit(X_train,Y_train)
print(clf.best_score_)
print(clf.score(X_test,Y_test))

**rbf

import csv
import decimal
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import sklearn.neighbors
from sklearn import tree
with open('input3.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    file1=list(spamreader)
arr_data=[]
arr_target=[]
for i in range(1,len(file1)):
    row=file1[i]
    items_string=row[0]
    items=items_string.split(',')
    arr_data.append([float(items[0]),float(items[1])])
    arr_target.append(float(items[2]))
parameter_candidates = [
  { 'C' : [0.1, 0.5, 1, 5, 10, 50, 100],'kernel':['rbf'],'gamma':[0.1, 0.5, 1, 3, 6, 10]}
]
X_train, X_test, Y_train, Y_test = train_test_split(arr_data,arr_target,test_size=0.4,random_state=0)
clf = GridSearchCV(estimator=svm.SVC(),param_grid=parameter_candidates,cv=5,scoring='accuracy')
clf.fit(X_train,Y_train)
print(clf.best_score_)
print(clf.score(X_test,Y_test))

**logistic

import csv
import decimal
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import sklearn.neighbors
from sklearn import tree
with open('input3.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    file1=list(spamreader)
arr_data=[]
arr_target=[]
for i in range(1,len(file1)):
    row=file1[i]
    items_string=row[0]
    items=items_string.split(',')
    arr_data.append([float(items[0]),float(items[1])])
    arr_target.append(float(items[2]))
parameter_candidates = [
  { 'C' : [0.1, 0.5, 1, 5, 10, 50, 100]}
]
X_train, X_test, Y_train, Y_test = train_test_split(arr_data,arr_target,test_size=0.4,random_state=0)
clf = GridSearchCV(LogisticRegression(),param_grid=parameter_candidates,cv=5,scoring='accuracy')
clf.fit(X_train,Y_train)
print(clf.best_score_)
print(clf.score(X_test,Y_test))

**knn

import csv
import decimal
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import sklearn.neighbors
from sklearn import tree
with open('input3.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    file1=list(spamreader)
arr_data=[]
arr_target=[]
for i in range(1,len(file1)):
    row=file1[i]
    items_string=row[0]
    items=items_string.split(',')
    arr_data.append([float(items[0]),float(items[1])])
    arr_target.append(float(items[2]))
parameter_candidates = [
  { 'n_neighbors' : range(1,51),'leaf_size':[5,10,15,20,25,30,35,40,45,50,55,60]}
]
X_train, X_test, Y_train, Y_test = train_test_split(arr_data,arr_target,test_size=0.4,random_state=0)
clf = GridSearchCV(sklearn.neighbors.KNeighborsClassifier(),param_grid=parameter_candidates,cv=5,scoring='accuracy')
clf.fit(X_train,Y_train)
print(clf.best_score_)
print(clf.score(X_test,Y_test))

**decision tree

import csv
import decimal
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import sklearn.neighbors
from sklearn import tree
with open('input3.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    file1=list(spamreader)
arr_data=[]
arr_target=[]
for i in range(1,len(file1)):
    row=file1[i]
    items_string=row[0]
    items=items_string.split(',')
    arr_data.append([float(items[0]),float(items[1])])
    arr_target.append(float(items[2]))
parameter_candidates = [
  {'max_depth':range(1,51),'min_samples_split':range(2,11)}
]
X_train, X_test, Y_train, Y_test = train_test_split(arr_data,arr_target,test_size=0.4,random_state=0)
clf = GridSearchCV(tree.DecisionTreeClassifier(),param_grid=parameter_candidates,cv=5,scoring='accuracy')
clf.fit(X_train,Y_train)
print(clf.best_score_)
print(clf.score(X_test,Y_test))

**random forest

import csv
import decimal
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import sklearn.neighbors
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
with open('input3.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    file1=list(spamreader)
arr_data=[]
arr_target=[]
for i in range(1,len(file1)):
    row=file1[i]
    items_string=row[0]
    items=items_string.split(',')
    arr_data.append([float(items[0]),float(items[1])])
    arr_target.append(float(items[2]))
parameter_candidates = [
  {'max_depth':range(1,51),'min_samples_split':range(2,11)}
]
X_train, X_test, Y_train, Y_test = train_test_split(arr_data,arr_target,test_size=0.4,random_state=0)
clf = GridSearchCV(RandomForestClassifier(),param_grid=parameter_candidates,cv=5,scoring='accuracy')
clf.fit(X_train,Y_train)
print(clf.best_score_)
print(clf.score(X_test,Y_test))